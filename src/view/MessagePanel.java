/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import model.Database;
import model.Email;
import model.ErrorCode;
import model.Language;
import model.Message;
import model.MessageFetcher;
import model.MessageOutputer;
import model.MessageType;
import model.Sms;
import model.User;

/**
 *
 * @author Jim
 */
public class MessagePanel extends javax.swing.JPanel
{

    private Database db = null;
    private NewMessagePanel newPanel = null;
    private EmailFrame emailFrame;
    private SmsFrame smsFrame;
    private MessageOutputer outputer = null;
    protected String user, host, password, recipient;

    /**
     * Creates new form UserPanel
     *
     * @param db
     */
    public MessagePanel(Database db, SmsFrame smsFrame, EmailFrame emailFrame, MessageOutputer outputer)
    {
        initComponents();
        this.db = db;
        
        this.smsFrame = smsFrame;
        this.emailFrame = emailFrame;
        
        this.outputer = outputer;
        
        fillLanguageComboBox();
        MessageFetcher fetcher = new MessageFetcher(db, messageList);
        Thread thread = new Thread(fetcher);
        thread.start();
    }
    
    public void updateSettings(String user, String host, String password, String recipient){
        this.user = user;
        this.host = host;
        this.password = password;
        this.recipient = recipient;
    }
    
    
    public void fillList(){
        messageList.setListData(db.toMessageArray());
    }
    
    public void fillLanguageComboBox(){
        for (Language language : db.alLanguages)
        {
            languageComboBox.addItem(language);
        }
    }

    public JList<String> getMessageList()
    {
        return messageList;
    }
    
    
    

    public void setDatabase(Database db)
    {
        this.db = db;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        messageList = new javax.swing.JList<>();
        newMessageButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        languageComboBox = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(204, 255, 255));
        setPreferredSize(new java.awt.Dimension(1200, 500));

        messageList.setPreferredSize(null);
        messageList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                messageListMousePressed(evt);
            }
        });
        messageList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageListKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(messageList);

        newMessageButton.setText("new");
        newMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMessageButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        languageComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                languageComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(languageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 849, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(158, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(newMessageButton)
                .addGap(18, 18, 18)
                .addComponent(deleteButton)
                .addGap(502, 502, 502))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newMessageButton)
                    .addComponent(deleteButton))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(languageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(282, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newMessageButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newMessageButtonActionPerformed
    {//GEN-HEADEREND:event_newMessageButtonActionPerformed
        newPanel = new NewMessagePanel(db);
        int result = JOptionPane.showConfirmDialog(this, newPanel, "Create new message", JOptionPane.OK_CANCEL_OPTION);
        if(result == JOptionPane.OK_OPTION){
            User user = db.getUserLoggedIn();
            MessageType messageType = (MessageType)newPanel.getTypeComboBox().getSelectedItem();
            ErrorCode errorCode = (ErrorCode)newPanel.getErrorCodeComboBox().getSelectedItem();
            Language language = (Language)newPanel.getLanguageComboBox().getSelectedItem();
            Email email = (Email)newPanel.getEmailComboBox().getSelectedItem();
            Sms sms = (Sms)newPanel.getSmsComboBox().getSelectedItem();
            
            String param1 = newPanel.getParam1TextField().getText();
            String param2 = newPanel.getParam2TextField().getText();
            String param3 = newPanel.getParam3TextField().getText();
            if(param1.isEmpty()) param1 = null;
            else param1 = "'" + param1 + "'";
            
            if(param2.isEmpty()) param2 = null;
            else param2 = "'" + param3 + "'";
            
            if(param3.isEmpty()) param3 = null;
            else param3 = "'" + param3 + "'";
            
            db.addMessage(user, messageType, errorCode, email, sms, language, param1, param2, param3);
            fillList();
        }
    }//GEN-LAST:event_newMessageButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
    {//GEN-HEADEREND:event_deleteButtonActionPerformed
        List<String> messagesToDelete = messageList.getSelectedValuesList();
        ArrayList<Integer> alIds = new ArrayList<>();
        for (String message : messagesToDelete)
        {
            db.deleteMessage(Integer.valueOf(message.split(" ")[0]));
            db.getMessages();
            fillList();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void languageComboBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_languageComboBoxItemStateChanged
    {//GEN-HEADEREND:event_languageComboBoxItemStateChanged
        db.currentLanguage = (Language)languageComboBox.getSelectedItem();
        messageList.setListData(db.toMessageArray());
    }//GEN-LAST:event_languageComboBoxItemStateChanged

    private void messageListKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_messageListKeyPressed
    {//GEN-HEADEREND:event_messageListKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_DELETE){
            deleteButton.doClick();
        }
    }//GEN-LAST:event_messageListKeyPressed

    private void messageListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_messageListMousePressed
        if(evt.getButton() == 3){
            JPopupMenu contextMenu = new JPopupMenu("Context");
            JMenuItem item = new JMenuItem("Send Email");
            item.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    List<String> selectedMessages = messageList.getSelectedValuesList();
                    ArrayList<Message> alMessages = new ArrayList<>();
                    for (String selectedMessage : selectedMessages) {
                        Message message = db.getMessage(Integer.valueOf(selectedMessage.split(" ")[0]));
                        alMessages.add(message);
                    }
                    outputer.setHost(emailFrame.getSmtpServer());
                    outputer.setUser(emailFrame.getUser());
                    outputer.setPassword(emailFrame.getPassword());
                    outputer.sendMail(alMessages);
                }
            });
            contextMenu.add(item);
            item = new JMenuItem("Send to database");
            item.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    System.out.println("To db");
                }
            });
            contextMenu.add(item);
            item = new JMenuItem("Safe to file");
            item.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    List<String> selectedMessages = messageList.getSelectedValuesList();
                    ArrayList<Message> alMessages = new ArrayList<>();
                    for (String selectedMessage : selectedMessages) {
                        Message message = db.getMessage(Integer.valueOf(selectedMessage.split(" ")[0]));
                        alMessages.add(message);
                        outputer.saveToFile(alMessages);
                    }
                }
            });
            contextMenu.add(item);
            
            item = new JMenuItem("Send sms");
            item.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e)
                {
                    List<String> selectedMessages = messageList.getSelectedValuesList();
                    ArrayList<Message> alMessages = new ArrayList<>();
                    for (String selectedMessage : selectedMessages) {
                        Message message = db.getMessage(Integer.valueOf(selectedMessage.split(" ")[0]));
                        alMessages.add(message);
                    }
                    
                    outputer.setApiKey(smsFrame.getKey());
                    outputer.setApiSecret(smsFrame.getSecret());
                    
                    outputer.sendSms(alMessages);
                }
            });
            
            contextMenu.add(item);
            contextMenu.show(messageList, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_messageListMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox languageComboBox;
    private javax.swing.JList<String> messageList;
    private javax.swing.JButton newMessageButton;
    // End of variables declaration//GEN-END:variables
}
